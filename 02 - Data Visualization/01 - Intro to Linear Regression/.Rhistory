heartrate <- read.csv("~/OneDrive - The University of Texas at Austin/01 - University of Texas at Austin/04 - Fall 2020/04 - STA 309/01 - Material/02 - Data Visualization/01 - Intro to Linear Regression/heartrate.csv")
View(heartrate)
heartrate_test <- read.csv("~/OneDrive - The University of Texas at Austin/01 - University of Texas at Austin/04 - Fall 2020/04 - STA 309/01 - Material/02 - Data Visualization/01 - Intro to Linear Regression/heartrate_test.csv", sep="")
View(heartrate_test)
library(tidyverse)
library(ggplot2)
library(mosaic)
heartrate = read.csv("../data/heartrate.csv")
# a scatterplot
ggplot(heartrate) +
geom_point(aes(x=age, y=hrmax))
# fit the model
lm1 = lm(hrmax ~ age, data=heartrate)
View(lm1)
# summarize the trend
coef(lm1)
# calculate r squared for the model
rsquared(lm1)
# note: rsquared is also at the bottom of the "regression table":
summary(lm1)
# here are our model's predictions
# the predict function expects a data frame whose column names
# match the x variable (or variables) in the original data set
predict(lm1, newdata = heartrate_test)
# let's add these predictions to the heartrate_test data frame
heartrate_test = heartrate_test %>%
mutate(hrmax_pred = predict(lm1, newdata = heartrate_test))
# we don't know their actual hrmax, but we do have our model predictions
heartrate_test
# finally, let's do "statistical adjustment."
# Remember: the model residuals represent the difference between
# actual hr_max and predicted/fitted hr_max.
# in this case: hrmax, adjusted for age.
fitted(lm1) # the model fit for each data point
resid(lm1) # the model residual for each data point
# it's a little more helpful if we put these side by side
# with the original data points
heartrate_aug = heartrate %>%
mutate(hrmax_pred = fitted(lm1),
hrmax_resid = resid(lm1))
heartrate_aug
# we can even arrange by the residuals: in ascending order....
heartrate_aug %>%
arrange(hrmax_resid) %>%
head(10)
library(tidyverse)
library(ggplot2)
library(mosaic)
data(TenMileRace)
head(TenMileRace)
cat("\f")
head(TenMileRace)
# our basic scatterplot
# (saved as p0 for subsequent layering)
p0 = ggplot(data=TenMileRace) +
geom_point(aes(x=age, y=net), alpha=0.1)
p0
p0
View(p0)
p0
# Adding a smoothing layer:
# see geom_smooth for the gory details! (very, very optional)
p0 + geom_smooth(aes(x=age, y=net))
# manually change the color of the trend line
p0 + geom_smooth(aes(x=age, y=net), color='limegreen')
# if you want to suppress the error bands
p0 + geom_smooth(aes(x=age, y=net), color='limegreen', se=FALSE)
cat("\f")
# If multiple layers share the same aesthetic mapping,
# you might find it more concise to put the mapping in
# the ggplot command itself
ggplot(data=TenMileRace, mapping=aes(x=age, y=net)) +
geom_point(alpha=0.1) +
geom_smooth()
# geom_smooth also plays nicely with other ggplot layers
p0 +  facet_wrap(~sex) +
geom_smooth(aes(x=age, y=net), color='limegreen', se=FALSE)
# A facet grid
local_states = c('DC', 'VA', 'MD')
TenMileRace = TenMileRace %>%
mutate(local = ifelse(state %in% local_states, 'Local', 'Out of State'))
head(TenMileRace)
ggplot(data=TenMileRace) +
geom_point(aes(x=age, y=net), alpha=0.1) +
facet_grid(sex ~ local) +
geom_smooth(aes(x=age, y=net), color='limegreen')
